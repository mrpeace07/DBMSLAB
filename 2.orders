CREATE DATABASE ORDER_DATABASE;
USE ORDER_DATABASE;

CREATE TABLE SALESMAN (
    SALESMAN_ID INT PRIMARY KEY,
    NAME VARCHAR(20),
    CITY VARCHAR(20),
    COMMISSION VARCHAR(20)
);

CREATE TABLE CUSTOMER (
    CUSTOMER_ID INT PRIMARY KEY,
    CUST_NAME VARCHAR(20),
    CITY VARCHAR(20),
    GRADE INT,
    SALESMAN_ID INT,
    FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE
);

CREATE TABLE ORDERS (
    ORD_NO INT PRIMARY KEY,
    PURCHASE_AMT INT,
    ORD_DATE DATE,
    CUSTOMER_ID INT,
    SALESMAN_ID INT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
    FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE
);

#VALUE INSERTION

INSERT INTO SALESMAN
    (SALESMAN_ID, NAME, CITY, COMMISSION)
VALUES
    (1000, 'A', 'BENGALURU', '20%'),
    (1001, 'B', 'BENGALURU', '30%'),
    (1002, 'C', 'MYSURU', '10%'),
    (1003, 'D', 'MANGALURU', '50%'),
    (1004, 'E', 'HUBLI', '60%');

SELECT * FROM SALESMAN;

INSERT INTO CUSTOMER
    (CUSTOMER_ID, CUST_NAME, CITY, GRADE, SALESMAN_ID)
VALUES
    (100, 'AB', 'BENGALURU', 5, 1000),
    (101, 'BC', 'BENGALURU', 6, 1001),
    (102, 'CD', 'MYSURU', 6, 1002),
    (103, 'DE', 'MYSURU', 7, 1003),
    (104, 'EF', 'HUBLI', 4, 1003);

SELECT * FROM CUSTOMER;

INSERT INTO ORDERS
    (ORD_NO, PURCHASE_AMT, ORD_DATE, CUSTOMER_ID, SALESMAN_ID)
VALUES
    (1, 2000, '2022-04-11', 100, 1000),
    (2, 1000, '2022-05-12', 101, 1001),
    (3, 500, '2023-10-12', 102, 1002),
    (4, 1500, '2023-10-12', 103, 1003),
    (5, 750, '2023-11-11', 104, 1003);

SELECT * FROM ORDERS;

#QUERIES

# 1. Count the customers with grades above Bangalor’s average.
SELECT COUNT(CUSTOMER_ID)
FROM CUSTOMER
WHERE GRADE > (SELECT AVG(GRADE)
                FROM CUSTOMER
                WHERE CITY = 'BENGALURU'
                );

# 2. Find the name and numbers of all salesmen who had more than one customer.
SELECT NAME, COUNT(CUSTOMER_ID)
FROM SALESMAN S, CUSTOMER C
WHERE S.SALESMAN_ID = C.SALESMAN_ID
GROUP BY NAME
HAVING COUNT(CUSTOMER_ID) > 1;

# 3. List all salesmen and indicate those who have and don’t have customers in their cities
# (Use UNION operation).
SELECT S.SALESMAN_ID, S.NAME, S.CITY, 'Has Customer' AS STATUS
FROM SALESMAN S
WHERE S.SALESMAN_ID IN ( SELECT SALESMAN_ID
                         FROM CUSTOMER
                         WHERE CITY = S.CITY
                        )
UNION
SELECT S.SALESMAN_ID, S.NAME, S.CITY, 'No Customer' AS STATUS
FROM SALESMAN S
WHERE S.SALESMAN_ID NOT IN ( SELECT SALESMAN_ID
                         FROM CUSTOMER
                         WHERE CITY = S.CITY
                        );

# 4. Create a view that finds the salesman who has the customer with the highest order of a
# day.
CREATE VIEW HIGHEST_ORDER AS
SELECT O.ORD_DATE, S.SALESMAN_ID, S.NAME
FROM SALESMAN S, ORDERS O
WHERE S.SALESMAN_ID = O.SALESMAN_ID
AND O.PURCHASE_AMT = (SELECT MAX(PURCHASE_AMT)
FROM ORDERS C
WHERE C.ORD_DATE = O.ORD_DATE);

SELECT * FROM HIGHEST_ORDER;

# 5. Demonstrate the DELETE operation by removing salesman with id 1000. All his orders
# must also be deleted.
DELETE FROM SALESMAN
WHERE SALESMAN_ID = 1000;

SELECT * FROM SALESMAN;
SELECT * FROM CUSTOMER;

# 6. Create an index on ( CUSTOMER (ID) ) to demonstrate the usage.
CREATE INDEX INDEX_CUSTOMER_ID ON CUSTOMER(CUSTOMER_ID);

SHOW INDEX FROM CUSTOMER;
